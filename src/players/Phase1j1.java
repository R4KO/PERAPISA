/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package players;


import java.util.ArrayList;
import java.util.Scanner;
import question.ListeQuestions;
import question.Question;
import question.TypeQCM;
import question.TypeRC;
import question.TypeVF;
import sun.security.tools.keytool.Main;

/**
 *
 * @author samot
 */
public class Phase1j1 extends javax.swing.JFrame {

    public static ListeQuestions questi;
    public static ArrayList<String> bonReponse;
    public int i;
    /**
     * Creates new form Phase1j1
     */
    public Phase1j1() {
        initComponents();
        Joueur j1 = new Joueur();
        j1 = SelectionJoueur.tab[0];
        Joueurs1.setText(j1.toString());
        jeuPhase1(questi, bonReponse, j1, i);
       // question.setText(questi.toString());
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Joueurs1 = new javax.swing.JTextArea();
        question = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Phase 1 : Tour 1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(518, 518, 518)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        Joueurs1.setColumns(20);
        Joueurs1.setRows(5);
        jScrollPane1.setViewportView(Joueurs1);

        question.setText("jLabel2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(question, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(358, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(question, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 549, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Phase1j1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Phase1j1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Phase1j1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Phase1j1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Phase1j1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Joueurs1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel question;
    // End of variables declaration//GEN-END:variables

    private void jeuPhase1(ListeQuestions questi, ArrayList<String> bonReponse, Joueur j1, int type) {
       System.out.println("Joueur " + j1.getNom() + " c'est à vous de jouer");
        Scanner sc = new Scanner(System.in);
        String reponse = "null";
        int i = 0;
        if(type == 0){
            //type = QCM
            //On gère la selection de la question par rapport à un niveau donné
            Question<TypeQCM> selec = null;
            while(selec == null) {
                i = (int) (Math.random() * 100 % ListeQuestions.getList().size());
                selec = questi.selectionnerQuestion(1, i);
            }
            Question<TypeQCM> q = new Question<TypeQCM>(1, (TypeQCM) selec.getEnonceQ());
            //On affiche la question, ici dans le désordre pour ne pas que l'utilisateur sache ou est la bonne reponse
            q.afficher();
            //On gère la réponse donné par l'utilisateur
            System.out.println("Réécrivez la réponse que vous trouver juste:");
            reponse = sc.nextLine();
            if(bonReponse.get(i).equals(reponse)){
                j1.mAJScore(2);
                System.out.println("Bravo c'est la bonne réponse\n");
            }else{
                System.out.println("dommage la bonne réponse était " + bonReponse.get(i)+ "\n");
            }
        }else if (type == 1){
            //type vrai/faux
            //On gère la selection de la question par rapport à un niveau donné
            Question<TypeVF> selec = null;
            while(selec == null){
                i = (int) (Math.random() * 100 % ListeQuestions.getList().size());
                selec = questi.selectionnerQuestion(1, i);
            }
            Question<TypeVF> q = new Question<TypeVF>(1, (TypeVF) selec.getEnonceQ());
            //On affiche la question
            q.afficher();
            //On gère la réponse donné par l'utilisateur
            System.out.println("écrivez vrai ou faux:");
            reponse = sc.nextLine();
            if(bonReponse.get(i).equals(reponse)){
                j1.mAJScore(2);
                System.out.println("Bravo c'est la bonne réponse\n");
            }else{
                System.out.println("dommage la bonne réponse était " + bonReponse.get(i) + "\n");
            }
        }else{
            //type réponse courte
            //On gère la selection de la question par rapport à un niveau donné
            Question<TypeRC> selec = null;
            while(selec == null){
                i = (int) (Math.random() * 100 % ListeQuestions.getList().size());
                selec = questi.selectionnerQuestion(1, i);
            }
            Question<TypeRC> q= new Question<TypeRC>(1, (TypeRC) selec.getEnonceQ());
            //On affiche la question
            q.afficher();
            //On gère la réponse donné par l'utilisateur
            System.out.println("écrivez la bonne réponse");
            reponse = sc.nextLine();
            if(bonReponse.get(i).equals(reponse)){
                j1.mAJScore(2);
                System.out.println("Bravo c'est la bonne réponse\n");
            }else{
                System.out.println("dommage la bonne réponse était " + bonReponse.get(i)+ "\n");
            }
        }
    }
}
